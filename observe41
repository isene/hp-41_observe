#!/usr/bin/ruby
# encoding: utf-8

def help
puts <<HELPTEXT

HP-41 TELESCOPE CONTROLLER SOFTWARE

Program created by Geir Isene (g@isene.com http://isene.com) to facilitate
controlling a telescope mount with your HP-41 and the USB41 module (by Diego
Diaz: http://www.clonix.org) as the bridge between your calculator and your PC
running an INDI server. The telescope is controlled by that INDI server.

This program requires Ruby and ruby-serialport. Make sure the program is
executable (with "chmod a+x") and drop it in your "bin" folder of choice.

This is the output of 'observe41 -h':

Usage: observe41 [options]  (no option = )
    -D, --dev DEVICE     Specify the device connected to the HP-41 (default=/dev/ttyUSB0)
    -d, --driver DRIVER  Specify the driver to be used to connect to the INDI server
    -h  --help           Display help text

The program defaults to input from /dev/ttyUSB0, but you may specify another
input device by simply adding it as an argument to the program:

    observe41 -D /dev/ttyUSB1

For Mac OS/X users, the usual device would be "/dev/tty.usbserial ". 

The program defaults to the INDI driver "Telescope Simulator" to make it easy to
run the program with kstars and Stellarium in telescope simulation mode. To control
your actual telescope, supply the correct INDI driver with the -D switch.

Please amend the script if you want or ask me for new features.

Version: 0.3 (2020-01-12)
License: Public domain

HELPTEXT
end

# Set mount driver
$driver = "Telescope Simulator"

# Load modules
begin
    require 'rubygems'
rescue
end

begin
    require "serialport"
rescue
    puts "You need to install ruby-serialport (gem install ruby-serialport)"
    exit
end

require 'optparse'

# Parameters for the serial port
$port_str = "/dev/ttyUSB0"
data_bits = 8
stop_bits = 1
parity = SerialPort::NONE

# Handle the command line options
options = {}
optparse = OptionParser.new do |opts|
  # Set a banner, displayed at the top of the help screen.
  opts.banner = "Usage: scope41 [options]"
  # Define the options, and what they do
  opts.on('-d', '--driver DRIVER', 'Specify the driver to be used to connect to the INDI server') do |drv|
		$driver = drv
  end
  opts.on('-D', '--dev DEVICE', 'Specify the device connected to the HP-41 (default=/dev/ttyUSB0)') do |dev|
		$port_str = dev
  end
  opts.on('-h', 'Display SHORT help text') do
		puts opts
		exit	
  end
  opts.on('--help', 'Display LONG help text') do
		help
		exit
  end
end
optparse.parse!

# Initiate listening to the device and translate incoming bytes
baud_rate = 115200
sp = SerialPort.new($port_str, baud_rate, data_bits, stop_bits, parity)
chrarray = ["♦", "¤", "ж", "←", "α", "β", "Γ", "↓", "Δ", "σ", 
						"♦", "λ", "μ", "д", "τ", "Φ", "Θ", "Ω", "δ", "Å", 
						"å", "Ä", "ä", "Ö", "ö", "Ü", "ü", "Æ", "æ", "≠", 
						"£", "▒", " ", "!", "\"", "\#", "$", "%", "&", "'", 
						"(", ")", "*", "+", ",", "-", ".", "/", "0", "1", 
						"2", "3", "4", "5", "6", "7", "8", "9", ":", ";", 
						"<", "=", ">", "?", "@", "A", "B", "C", "D", "E", 
						"F", "G", "H", "I", "J", "K", "L", "M", "N", "O", 
						"P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", 
						"Z", "[", "\\", "]", "↑", "_", "`", "a", "b", "c", 
						"d", "e", "f", "g", "h", "i", "j", "k", "l", "m", 
						"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", 
						"x", "y", "z", "π", "|", "→", "Σ", "├"]

loop do
	outstr = ""
	inchr  = ""
	loop do
		inchr   = sp.getc.unpack('C')[0]
		break if inchr == 69
		outstr += chrarray[inchr] if inchr > 47 and inchr < 58
		break if outstr.length == 12
	end
	break if inchr == 69
	outstr.gsub!(/(..)(..)(..)(..)(..)(..)/, '\1.\2.\3;\4.\5.\6')
	outstr = $driver + ".EQUATORIAL_EOD_COORD.RA;DEC=" + outstr
	`indi_setprop "#{outstr}"`
	puts outstr
end

sp.close
puts "Connection closed."
